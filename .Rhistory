df_train <- read.csv("yelp_train.csv")
df_test <- read.csv("yelp_test.csv")
df_train <- read.csv("yelp_train.csv")
df_test <- read.csv("yelp_test.csv")
summary(df_train)
summary(df_test)
head(df_train)
missing_counts_train <- colSums(df_train == "(Missing)")
missing_table_train <- data.frame(
Variable = names(missing_counts_train),
Missing_Count = as.numeric(missing_counts_train)
)
print(missing_table_train)
head(df_test)
missing_counts <- colSums(df_test == "(Missing)")
missing_table_test <- data.frame(
Variable = names(missing_counts),
Missing_Count = as.numeric(missing_counts)
)
# Mostrar la tabla de valores faltantes
print(missing_table_test)
missing_percentage <- colSums(df_train == "(Missing)") / nrow(df_train) * 100
missing_table1 <- data.frame(
Variable = names(missing_percentage),
Porcentaje_Faltantes = as.numeric(missing_percentage)
)
# tabla de porcentaje de valores faltantes
print(missing_table1)
missing_percentage_test <- colSums(df_test == "(Missing)") / nrow(df_test) * 100
missing_table_test <- data.frame(
Variable = names(missing_percentage_test),
Porcentaje_Faltantes = as.numeric(missing_percentage_test)
)
#tabla de porcentaje de valores faltantes
print(missing_table_test)
str(df_train)
str(df_test)
table(df_test$Caters)
df_train$GoodForKids <- factor( df_train$GoodForKids  )
df_train$GoodForKids <- relevel( df_train$GoodForKids , ref = "(Missing)" )
# Completar de manera similar para las otras variables
df_train$Alcohol <- factor(df_train$Alcohol)
df_train$Alcohol <- relevel(df_train$Alcohol, ref = "(Missing)")
df_train$BusinessAcceptsCreditCards <- factor(df_train$BusinessAcceptsCreditCards)
df_train$BusinessAcceptsCreditCards <- relevel(df_train$BusinessAcceptsCreditCards, ref = "(Missing)")
df_train$WiFi <-  factor(df_train$WiFi)
df_train$WiFi <-  relevel(df_train$WiFi, ref = "(Missing)")
df_train$BikeParking <-  factor(df_train$BikeParking)
df_train$BikeParking <-  relevel(df_train$BikeParking, ref = "(Missing)")
df_train$ByAppointmentOnly <-  factor(df_train$ByAppointmentOnly)
df_train$ByAppointmentOnly <-  relevel(df_train$ByAppointmentOnly, ref = "(Missing)")
df_train$WheelechairAccessible <-  factor(df_train$WheelechairAccessible)
df_train$WheelechairAccessible <-  relevel(df_train$WheelechairAccessible, ref = "(Missing)")
df_train$OutdoorSeating <-  factor(df_train$OutdoorSeating)
df_train$OutdoorSeating <-  relevel(df_train$OutdoorSeating, ref = "(Missing)")
df_train$RestaurantsReservations <-  factor(df_train$RestaurantsReservations)
df_train$RestaurantsReservations <-  relevel(df_train$RestaurantsReservations, ref = "(Missing)")
df_train$DogsAllowed <-  factor(df_train$DogsAllowed)
df_train$DogsAllowed <-  relevel(df_train$DogsAllowed, ref = "(Missing)")
df_train$Caters <-  factor(df_train$Caters)
df_train$Caters <-  relevel(df_train$Caters, ref = "(Missing)")
# REALIZAR LO MISMO PARA LAS VARIABLES CUALITATIVAS DE df_test
df_test$GoodForKids <- factor(df_test$GoodForKids)
df_test$GoodForKids <- relevel(df_test$GoodForKids, ref = "(Missing)")
df_test$Alcohol <- factor(df_test$Alcohol)
df_test$Alcohol <- relevel(df_test$Alcohol, ref = "(Missing)")
df_test$BusinessAcceptsCreditCards <- factor(df_test$BusinessAcceptsCreditCards)
df_test$BusinessAcceptsCreditCards <- relevel(df_test$BusinessAcceptsCreditCards, ref = "(Missing)")
df_test$WiFi <- factor(df_test$WiFi)
df_test$WiFi <- relevel(df_test$WiFi, ref = "(Missing)")
df_test$BikeParking <- factor(df_test$BikeParking)
df_test$BikeParking <- relevel(df_test$BikeParking, ref = "(Missing)")
df_test$ByAppointmentOnly <- factor(df_test$ByAppointmentOnly)
df_test$ByAppointmentOnly <- relevel(df_test$ByAppointmentOnly, ref = "(Missing)")
df_test$WheelechairAccessible <- factor(df_test$WheelechairAccessible)
df_test$WheelechairAccessible<- relevel(df_test$WheelechairAccessible, ref = "(Missing)")
df_test$OutdoorSeating <- factor(df_test$OutdoorSeating)
df_test$OutdoorSeating <- relevel(df_test$OutdoorSeating, ref = "(Missing)")
df_test$RestaurantsReservations <- factor(df_test$RestaurantsReservations)
df_test$RestaurantsReservations <- relevel(df_test$RestaurantsReservations, ref = "(Missing)")
df_test$DogsAllowed <- factor(df_test$DogsAllowed)
df_test$DogsAllowed <- relevel(df_test$DogsAllowed, ref = "(Missing)")
df_test$Caters <- factor(df_test$Caters)
df_test$Caters <- relevel(df_test$Caters, ref = "(Missing)")
dfclass_train <- data.frame(df_train)
dfclass_test<- data.frame(df_test)
IsAboveFourTrain <- df_train$stars >= 4
IsAboveFourTest <- df_test$stars >= 4
# CREAMOS aboveFour en dfclass_train
dfclass_train$aboveFour[IsAboveFourTrain] <- 1
dfclass_train$aboveFour[!IsAboveFourTrain] <- 0
# CREAMOS aboveFour en dfclass_test
dfclass_test$aboveFour[IsAboveFourTest] <- 1
dfclass_test$aboveFour[!IsAboveFourTest] <- 0
dfclass_train$stars <- NULL
dfclass_test$stars <- NULL
# VERIFICAMOS
head(dfclass_train)
head(dfclass_test)
modelLR <- lm(stars ~ ., data = df_train)
summary(modelLR)
library(caret)
library(caret)
library(caret)
install.packages("recipes")
library(caret)
install.packages("recipes")
library(caret)
library(rpart, lib.loc = "C:/Program Files/R/R-4.2.0/library")
#library(caret)
library(rpart)
library(rpart.plot)
install.packages("rpart.plot")
library(rpart.plot)
#library(caret)
library(rpart)
library(rpart.plot)
library(caret)
library(caret)
library(caret)
install.packages("recipes")
library(caret)
library(caret)
library(caret)
library(caret)
install.packages("recipes")
set.seed(500)
treeReg = rpart(
stars ~ . ,
data = df_train, #datos de entrenamiento
cp = 0.001
)
summary(treeReg) # Resumen del árbol de regresión
plot(treeReg)
# Grilla donde se realiza la busqueda
model <- trainControl(method = "cv", number = 5 )
# Cambiamos a factor aboveFour con levels c(0,1).
dfclass_test$aboveFour <- factor( dfclass_test$aboveFour, levels = c(0, 1) )
dfclass_train$aboveFour <- factor( dfclass_train$aboveFour, levels = c(0, 1) )
model2 <- glm(aboveFour ~ ., data = dfclass_train, family = binomial)
summary(model2)
# Predicción en data de entrenamiento
# Predicción de las probabilidades en nuestros datos de entrenamiento
y_train_reglog <- predict(model2, dfclass_train, type = "response")
# Predicción de los valores(0 o 1) en nuestros datos de entrenamiento
y_train_reglog_bin <- ifelse( y_train_reglog >= 0.5, 1, 0 )
# Predicción en data de prueba
# Predicción de las probabilidades en nuestros datos de prueba
y_test_reglog <- predict(model2, dfclass_test, type = "response")
# Predicción de los valores(0 o 1) en nuestros datos de prueba
y_test_reglog_bin <- ifelse( y_test_reglog >= 0.5, 1, 0 )
# matriz de confusion: dfclass_train vs y_train_reglog_bin
y_train_reglog_bin <-  factor(y_train_reglog_bin, levels = c(0,1))
matrixCM_train_reglog <- confusionMatrix(data = y_train_reglog_bin,
reference = dfclass_train$aboveFour)
library(pROC)
# Curva ROC para datos de prueba
roc_test <- roc(dfclass_test$aboveFour, y_test_reglog)
plot(roc_test, main = "Curva ROC(Datos de Prueba)")
auc_test <- auc(roc_test)
auc_test
# Curva ROC para datos de entrenamiento
roc_train <- roc(dfclass_train$aboveFour, y_train_reglog)
plot(roc_train, main = "Curva ROC(Datos de Entrenamiento)")
auc_train <- auc(roc_train)
auc_train
# Mejor umbral usando el método de Youden
coords_you <- coords(roc_test, "best", ret = "threshold", best.method = "youden")
coords_you
# Mejor umbral usando el punto más cercano a la esquina superior izquierda
coords_closest <- coords(roc_test, "best", ret = "threshold", best.method = "closest.topleft")
coords_closest
set.seed(88)
treeClass <- rpart(aboveFour ~ . ,
data = dfclass_train,
method = "class", # Clasificacion
control = rpart.control(minsplit = 5),
cp=0.01)
summary(treeClass) # Resumen del árbol de regresión
rpart.plot(treeClass)
# Predecimos los valores en nuestros datos de entrenamiento
y_train_pred_classTree <- predict(treeClass, dfclass_train, type = "class")
# Predecimos los valores en nuestros datos de entrenamiento
y_test_pred_classTree <- predict(treeClass, dfclass_test, type = "class")
# Matriz de confusión: dfclass_train vs y_train_pred_classTree
y_train_pred_classTree <-  factor(y_train_pred_classTree, levels = c(0,1))
matrixCM_train_classTree <-  confusionMatrix(data = y_train_pred_classTree,reference = dfclass_train$aboveFour)
model <- trainControl(method = "cv", number = 5)
library(Metrics)
install.packages("Metrics")
library(Metrics)
library(Metrics)
# METRICAS PARA EL MODELO DE REGRESION LINEAL
y_train_pred_LR <- predict(modelLR, df_train)
R2_train_LR <- R2( y_train_pred_LR, df_train$stars)
# Grilla donde se realiza la busqueda
model <- trainControl(method = "cv", number = 5 )
set.seed(500)
treeReg = rpart(
stars ~ . ,
data = df_train, #datos de entrenamiento
cp = 0.001
)
summary(treeReg) # Resumen del árbol de regresión
# Grilla donde se realiza la busqueda
model <- trainControl(method = "cv", number = 5 )
# COMENTARIO AQUI
matrixCM_baseline <- confusionMatrix(data = y_test_baseline ,
reference = dfclass_test$aboveFour)
library(caret)
library(rappdirs)
library(caret)
install.packages("recipes")
remove.packages("recipes")
install.packages("recipes")
install.packages("future.apply")
install.packages("recipes")
install.packages("recipes", type = "binary")
library(recipes)
library(caret)
install.packages("future.apply")
install.packages(c("future.apply", "future", "parallelly"), dependencies = TRUE, type = "source")
library(caret)
install.packages("caret", dependencies = TRUE)
remove.packages("caret")
install.packages("caret", dependencies = TRUE)
library(caret)
update.packages(ask = FALSE)
# COMENTE AQUI
y_train_pred_classTreeCV <-  factor(y_train_pred_classTreeCV, levels = c(0,1))
# Predecimos los valores en nuestros datos de entrenamiento
y_train_pred_classTree <- predict(treeClass, dfclass_train, type = "class")
# Predecimos los valores en nuestros datos de entrenamiento
y_test_pred_classTree <- predict(treeClass, dfclass_test, type = "class")
# Matriz de confusión: dfclass_train vs y_train_pred_classTree
y_train_pred_classTree <-  factor(y_train_pred_classTree, levels = c(0,1))
matrixCM_train_classTree <-  confusionMatrix(data = y_train_pred_classTree,reference = dfclass_train$aboveFour)
# Matriz de confusión: dfclass_test vs y_test_pred_classTree
y_test_pred_classTree <-  factor(y_test_pred_classTree, levels = c(0,1))
matrixCM_test_classTree <- confusionMatrix(data = y_test_pred_classTree,reference = dfclass_test$aboveFour)
model <- trainControl(method = "cv", number = 5)
library(caret)
# COMENTE AQUI
y_train_pred_classTreeCV <-  factor(y_train_pred_classTreeCV, levels = c(0,1))
